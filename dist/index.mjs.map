{"version":3,"sources":["../src/config/days.ts","../src/date/today.ts","../src/config/months.ts","../src/date/currentMonth.ts","../src/date/formatDate.ts"],"sourcesContent":["const days: string[] = [\"ორშაბათი\", \"სამშაბათი\", \"ოთხშაბათი\", \"ხუთშაბათი\", \"პარასკევი\", \"შაბათი\", \"კვირა\"];\r\n\r\nexport default days","import days from \"../config/days\";\r\n\r\ninterface TodayProps {\r\n  shorten?: number;\r\n  date?: Date;\r\n}\r\n\r\nexport default function today({ shorten, date = new Date() }: TodayProps = {}): string {\r\n  // Validate the date property\r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date property\");\r\n  }\r\n\r\n  const currentDayIndex = date.getDay();\r\n  const adjustedIndex = (currentDayIndex + 6) % 7;\r\n  let result = days[adjustedIndex];\r\n\r\n  // Validate the shorten property\r\n  if (typeof shorten !== \"undefined\" && (!Number.isInteger(shorten) || shorten <= 0)) {\r\n    throw new Error(\"The 'shorten' property must be a positive integer\");\r\n  }\r\n\r\n  // Apply the shorten property if provided\r\n  if (shorten) {\r\n    result = result.slice(0, shorten);\r\n  }\r\n\r\n  return result;\r\n}\r\n","const months: string[] = [\"იანვარი\", \"თებერვალი\", \"მარტი\", \"აპრილი\", \"მაისი\", \"ივნისი\", \"ივლისი\", \"აგვისტო\", \"სექტემბერი\", \"ოქტომბერი\", \"ნოემბერი\", \"დეკემბერი\"];\r\n\r\nexport default months;\r\n","import months from \"../config/months\";\r\n\r\ninterface CurrentMonthProps {\r\n  shorten?: number;\r\n  date?: Date;\r\n}\r\n\r\nexport default function currentMonth({ shorten, date = new Date() }: CurrentMonthProps = {}): string {\r\n  // Validate the date property\r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date property\");\r\n  }\r\n\r\n  const currentMonthIndex = date.getMonth();\r\n  let result = months[currentMonthIndex];\r\n\r\n  // Validate the shorten property\r\n  if (typeof shorten !== \"undefined\" && (!Number.isInteger(shorten) || shorten <= 0)) {\r\n    throw new Error(\"The 'shorten' property must be a positive integer\");\r\n  }\r\n\r\n  // Apply the shorten property if provided\r\n  if (shorten) {\r\n    result = result.slice(0, shorten);\r\n  }\r\n\r\n  return result;\r\n}\r\n","import days from \"../config/days\";\r\nimport months from \"../config/months\";\r\n\r\ninterface FormatDateProps {\r\n  date?: Date;\r\n  format: string;\r\n}\r\n\r\nexport default function formatDate({ date = new Date(), format }: FormatDateProps): string {\r\n  if (isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date property\");\r\n  }\r\n\r\n  const dayName = days[(date.getDay() + 6) % 7]; // Adjust for Georgian week starting on Monday\r\n  const dayNumber = date.getDate();\r\n  const monthName = months[date.getMonth()];\r\n  const year = date.getFullYear();\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  const seconds = date.getSeconds();\r\n\r\n  const replacements: { [key: string]: string | number } = {\r\n    წმ: seconds,\r\n    წთ: minutes,\r\n    სთ: hours,\r\n    დღე: dayName,\r\n    რიცხვი: dayNumber,\r\n    თვე: monthName,\r\n    წელი: year,\r\n  };\r\n\r\n  return format.replace(/__([a-zA-Zა-ჰ]+)(\\d+)?(_)?/g, (match, p1, p2, p3) => {\r\n    const value = String(replacements[p1]);\r\n    if (!p2) return value; // No cut specified\r\n\r\n    const n = parseInt(p2, 10);\r\n    if (isNaN(n)) return value;\r\n\r\n    if (p3) {\r\n      // Last n characters\r\n      return value.slice(-n);\r\n    } else {\r\n      // First n characters\r\n      return value.slice(0, n);\r\n    }\r\n  });\r\n}\r\n"],"mappings":";AAAA,IAAM,OAAiB,CAAC,oDAAY,0DAAa,0DAAa,0DAAa,0DAAa,wCAAU,gCAAO;AAEzG,IAAO,eAAQ;;;ACKA,SAAR,MAAuB,EAAE,SAAS,OAAO,oBAAI,KAAK,EAAE,IAAgB,CAAC,GAAW;AAErF,MAAI,EAAE,gBAAgB,SAAS,MAAM,KAAK,QAAQ,CAAC,GAAG;AACpD,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACzC;AAEA,QAAM,kBAAkB,KAAK,OAAO;AACpC,QAAM,iBAAiB,kBAAkB,KAAK;AAC9C,MAAI,SAAS,aAAK,aAAa;AAG/B,MAAI,OAAO,YAAY,gBAAgB,CAAC,OAAO,UAAU,OAAO,KAAK,WAAW,IAAI;AAClF,UAAM,IAAI,MAAM,mDAAmD;AAAA,EACrE;AAGA,MAAI,SAAS;AACX,aAAS,OAAO,MAAM,GAAG,OAAO;AAAA,EAClC;AAEA,SAAO;AACT;;;AC5BA,IAAM,SAAmB,CAAC,8CAAW,0DAAa,kCAAS,wCAAU,kCAAS,wCAAU,wCAAU,8CAAW,gEAAc,0DAAa,oDAAY,wDAAW;AAE/J,IAAO,iBAAQ;;;ACKA,SAAR,aAA8B,EAAE,SAAS,OAAO,oBAAI,KAAK,EAAE,IAAuB,CAAC,GAAW;AAEnG,MAAI,EAAE,gBAAgB,SAAS,MAAM,KAAK,QAAQ,CAAC,GAAG;AACpD,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACzC;AAEA,QAAM,oBAAoB,KAAK,SAAS;AACxC,MAAI,SAAS,eAAO,iBAAiB;AAGrC,MAAI,OAAO,YAAY,gBAAgB,CAAC,OAAO,UAAU,OAAO,KAAK,WAAW,IAAI;AAClF,UAAM,IAAI,MAAM,mDAAmD;AAAA,EACrE;AAGA,MAAI,SAAS;AACX,aAAS,OAAO,MAAM,GAAG,OAAO;AAAA,EAClC;AAEA,SAAO;AACT;;;ACnBe,SAAR,WAA4B,EAAE,OAAO,oBAAI,KAAK,GAAG,OAAO,GAA4B;AACzF,MAAI,MAAM,KAAK,QAAQ,CAAC,GAAG;AACzB,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACzC;AAEA,QAAM,UAAU,cAAM,KAAK,OAAO,IAAI,KAAK,CAAC;AAC5C,QAAM,YAAY,KAAK,QAAQ;AAC/B,QAAM,YAAY,eAAO,KAAK,SAAS,CAAC;AACxC,QAAM,OAAO,KAAK,YAAY;AAC9B,QAAM,QAAQ,KAAK,SAAS;AAC5B,QAAM,UAAU,KAAK,WAAW;AAChC,QAAM,UAAU,KAAK,WAAW;AAEhC,QAAM,eAAmD;AAAA,IACvD,cAAI;AAAA,IACJ,cAAI;AAAA,IACJ,cAAI;AAAA,IACJ,oBAAK;AAAA,IACL,sCAAQ;AAAA,IACR,oBAAK;AAAA,IACL,0BAAM;AAAA,EACR;AAEA,SAAO,OAAO,QAAQ,+BAA+B,CAAC,OAAO,IAAI,IAAI,OAAO;AAC1E,UAAM,QAAQ,OAAO,aAAa,EAAE,CAAC;AACrC,QAAI,CAAC,GAAI,QAAO;AAEhB,UAAM,IAAI,SAAS,IAAI,EAAE;AACzB,QAAI,MAAM,CAAC,EAAG,QAAO;AAErB,QAAI,IAAI;AAEN,aAAO,MAAM,MAAM,CAAC,CAAC;AAAA,IACvB,OAAO;AAEL,aAAO,MAAM,MAAM,GAAG,CAAC;AAAA,IACzB;AAAA,EACF,CAAC;AACH;","names":[]}